/*
 * Copyright IBM Corp All Rights Reserved
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package main

import (
	"fmt"
        "strconv"
        "encoding/json"

	"github.com/hyperledger/fabric-chaincode-go/shim"
	"github.com/hyperledger/fabric-protos-go/peer"
        "github.com/hyperledger/fabric-contract-api-go/contractapi"
)

// SimpleAsset implements a simple chaincode to manage an asset
type SimpleAsset struct {
          contractapi.Contract
}

type Payload struct {
	Parameters []uint64
}

// Init is called during chaincode instantiation to initialize any
// data. Note that chaincode upgrade also calls this function to reset
// or to migrate data.
func (t *SimpleAsset) Init(ctx contractapi.TransactionContextInterface, A string, Aval [] uint64, B string, Bval [] uint64) error {

        fmt.Println("ABstore Init")
	var err error
	// Initialize the chaincode
	fmt.Printf("Aval = %d, Bval = %d\n", Aval, Bval)
	// Write the state to the ledger

        Atest := Payload{
		Parameters: Aval
	}
	a, err := json.Marshal(Atest)
	if err != nil {
		fmt.Println("error:", err)
	}
	err = ctx.GetStub().PutState(A, a)
	if err != nil {
		return err
	}

        Btest := Payload{
                Parameters: Bval
        }
        b, err := json.Marshal(Btest)
        if err != nil {
                fmt.Println("error:", err)
        }   
        err = ctx.GetStub().PutState(B, b) 

	return nil

}

// Invoke is called per transaction on the chaincode. Each transaction is
// either a 'get' or a 'set' on the asset created by Init function. The Set
// method may create a new asset by specifying a new key-value pair.
func (t *SimpleAsset) Invoke(ctx contractapi.TransactionContextInterface, A, B string) error {
	// Extract the function and args from the transaction proposal
        var err error
        var C string
	var Cval [] uint64
	// Get the state from the ledger
	// TODO: will be nice to have a GetAllState call to ledger
	Avalbytes, err := ctx.GetStub().GetState(A)
	if err != nil {
		return fmt.Errorf("Failed to get state")
	}
	if Avalbytes == nil {
		return fmt.Errorf("Entity not found")
	}

        testA := new(Payload)
	_ = json.Unmarshal(Avalbytes, testA)


	Bvalbytes, err := ctx.GetStub().GetState(B)
	if err != nil {
		return fmt.Errorf("Failed to get state")
	}
	if Bvalbytes == nil {
		return fmt.Errorf("Entity not found")
	}
        
        testB := new(Payload)
        _ = json.Unmarshal(Bvalbytes, testB) 

        if testA.Parameters.length == testB.Parameters.length {
          for i := 0; i < testA.Parameters.length ; i++ {
              Cval[i] =testA.Parameters[i] + testB.Parameters[i]
          }
        }

        Ctest := Payload{
                Parameters: Cval
        }
        c, err := json.Marshal(Ctest)
        if err != nil {
                fmt.Println("error:", err)
        }   
        err = ctx.GetStub().PutState(C, c)


        return nil

}

func (t *SimpleAsset) Delete(ctx contractapi.TransactionContextInterface, A string) error {

	// Delete the key from the state in ledger
	err := ctx.GetStub().DelState(A)
	if err != nil {
		return fmt.Errorf("Failed to delete state")
	}

	return nil
}


func set(stub shim.ChaincodeStubInterface, args []string) (string, error) {
	if len(args) != 2 {
		return "", fmt.Errorf("Incorrect arguments. Expecting a key and a value")
	}

	erra := stub.PutState(args[0], []byte(args[1]))
	errb := stub.PutState(args[2], []byte(args[3]))
	errc := stub.PutState(args[4], []byte(args[5]))

        value := args[1] + args[3] + args[5]
	if erra != nil {
		return "", fmt.Errorf("Failed to set asset: %s", args[0])
	}
	if errb != nil {
		return "", fmt.Errorf("Failed to set asset: %s", args[2])
	}
	if errc != nil {
		return "", fmt.Errorf("Failed to set asset: %s", args[4])
	}
	return value, nil
}

func compute(stub shim.ChaincodeStubInterface, args []string) (string, error) {
        if len(args) != 6 { 
                return "", fmt.Errorf("Incorrect arguments. Expecting a key and a value")
        }   

        erra := stub.PutState(args[0], []byte(args[1]))
        if erra != nil {
                return "", fmt.Errorf("Failed to set asset: %s", args[0])
        }   
        valuea, erra := stub.GetState(args[0])


        errb := stub.PutState(args[2], []byte(args[3]))
        if errb != nil {
                return "", fmt.Errorf("Failed to set asset: %s", args[2])
        }
        valueb, errb := stub.GetState(args[2])


   
        errc := stub.PutState(args[4], []byte(args[5]))
        if errc != nil {
                return "", fmt.Errorf("Failed to set asset: %s", args[4])
        }   
        valuec, errc := stub.GetState(args[4])


        value := valuea + valueb + valuec

        return value, nil 
}


// Get returns the value of the specified asset key
func get(stub shim.ChaincodeStubInterface, args []string) (string, error) {
	if len(args) != 1 {
		return "", fmt.Errorf("Incorrect arguments. Expecting a key")
	}

	valuea, erra := stub.GetState(args[0])
	valueb, errb := stub.GetState(args[2])
	valuec, errc := stub.GetState(args[4])

        value := strconv.Atoi(valuea) + strconv.Atoi(valueb) + strconv.Atoi(valuec)
	if erra != nil {
		return "", fmt.Errorf("Failed to get asset: %s with error: %s", args[0], erra)
	}
	if value == nil {
		return "", fmt.Errorf("Asset not found: %s", args[0])
	}
	return string(value), nil
}

// main function starts up the chaincode in the container during instantiate
func main() {
	if err := shim.Start(new(SimpleAsset)); err != nil {
		fmt.Printf("Error starting SimpleAsset chaincode: %s", err)
	}
}
